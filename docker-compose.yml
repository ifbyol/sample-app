version: '3.8'

services:
  booking-management:
    build:
      context: ./booking-management
      dockerfile: Dockerfile
    expose:
      - "8080"
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=booking_management
    depends_on:
      postgres:
        condition: service_healthy

  payments:
    build:
      context: ./payments
      dockerfile: Dockerfile
    expose:
      - "3000"
    environment:
      - PORT=3000
      - NODE_ENV=production
      - LOG_LEVEL=info

  booking:
    build:
      context: ./booking
      dockerfile: Dockerfile
    expose:
      - "8081"
    environment:
      - PORT=8081
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - kafka

  kafka:
    image: apache/kafka:4.1.0
    container_name: kafka
    expose:
      - "9092"
    volumes:
      - kafka_data:/opt/kafka/logs
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@localhost:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_DIRS: '/opt/kafka/logs'
      CLUSTER_ID: 'oh-sxaDRTcyAr6pFRbXyzA'

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=booking_management
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    expose:
      - "3001"
    environment:
      - PORT=3001
      - NODE_ENV=production
      - LOG_LEVEL=info
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=admin_db
    depends_on:
      mysql:
        condition: service_healthy

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - ADMIN_SERVICE_URL=http://admin:3001
      - BOOKING_SERVICE_URL=http://booking:8081
      - BOOKING_MANAGEMENT_SERVICE_URL=http://booking-management:8080
    depends_on:
      - admin
      - booking
      - booking-management

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - "3080:80"
    environment:
      - GATEWAY_API_BASE_URL=https://gateway-${OKTETO_NAMESPACE}.test-nacho.dev.okteto.net
      - IGNORE_SSL_ERRORS=true
    depends_on:
      - gateway

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=booking_management
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./booking-management/db/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=admin_db
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
    expose:
      - "3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./admin/db/scripts:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  kafka_data:
  mysql_data: